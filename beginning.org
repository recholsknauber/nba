* Use Python to pull NBA data
** Python code for data pull
   #+name: nba_data_import
   #+begin_src python
     import pandas as pd
     from nba_data_pull import get_nba_team_stats

     nba_data_import_2011 = get_nba_team_stats (2011)
     nba_data_import_2011.head()
     nba_data_import_2011.to_csv("~/data/nba-data/nba_teams_2012.csv", index=True)
   #+end_src

* Clojure Data Manipulation
** Import NBA csv to Clojure, formatting into a sequence of maps.
https://github.com/clojure/data.csv
   #+begin_src clojure
     (require '[clojure.data.csv :as csv]
	      '[clojure.java.io :as io]
	      '[aprint.core :as aprint])

     (def whole-numbers (iterate inc 1))

     ;; Helper function to sort map keys by their order in a CSV.
     (defn csv-data-sort-columns [csv-data coll]
       (let [coll-index (zipmap (map keyword (first csv-data)) whole-numbers)]
	 (into (sorted-map-by #(compare (%1 coll-index) (%2 coll-index))) coll)))

     ;; Convert CSV data to maps
     (defn csv-data->maps [csv-data]
       (map zipmap
	    (->> (first csv-data) ;; First row is the header
		 (map keyword) ;; Drop if you want string keys instead
		 repeat)
	    (rest csv-data)))

     (defn csv-data->sorted-maps [csv-data]
       (map #(csv-data-sort-columns csv-data %1)
	    (csv-data->maps csv-data)))

     (def nba_team_stats_2011
       (with-open [reader (io/reader "/home/recholsknauber/data/nba-data/nba_teams_2012.csv")]
	 (doall
	  (let [csv-data (csv/read-csv reader)]
	    (csv-data->sorted-maps csv-data)))))

     (take 2 nba_team_stats_2011)
   #+end_src

   #+RESULTS:
   : nil#'nba.core/whole-numbers#'nba.core/csv-data-sort-columns#'nba.core/csv-data->maps#'nba.core/csv-data->sorted-maps#'nba.core/nba_team_stats_2011({:TEAM_ID "1610612737", :YEAR "2012-13", :AST "2007", :BLK "369", :CONF_COUNT "15.0", :CONF_RANK "6", :DIV_COUNT "5", :DIV_RANK "2", :DREB "2593", :FG3A "1901", :FG3M "706", :FG3_PCT "0.371", :FGA "6644", :FGM "3084", :FG_PCT "0.464", :FTA "1619", :FTM "1158", :FT_PCT "0.715", :GP "82", :LOSSES "38", :NBA_FINALS_APPEARANCE "N/A", :OREB "758", :PF "1473", :PO_LOSSES "4", :PO_WINS "2", :PTS "8032", :PTS_RANK "14", :REB "3351", :START_YEAR "2012-13", :STL "664", :TEAM_CITY "Atlanta", :TEAM_NAME "Hawks", :TOV "1219", :WINS "44", :WIN_PCT "0.537"} {:TEAM_ID "1610612737", :YEAR "2013-14", :AST "2041", :BLK "326", :CONF_COUNT "15.0", :CONF_RANK "8", :DIV_COUNT "5", :DIV_RANK "4", :DREB "2565", :FG3A "2116", :FG3M "768", :FG3_PCT "0.363", :FGA "6688", :FGM "3061", :FG_PCT "0.458", :FTA "1782", :FTM "1392", :FT_PCT "0.781", :GP "82", :LOSSES "44", :NBA_FINALS_APPEARANCE "N/A", :OREB "713", :PF "1577", :PO_LOSSES "4", :PO_WINS "3", :PTS "8282", :PTS_RANK "15", :REB "3278", :START_YEAR "2013-14", :STL "680", :TEAM_CITY "Atlanta", :TEAM_NAME "Hawks", :TOV "1251", :WINS "38", :WIN_PCT "0.463"})

** Start Oz server (throws error on browser open, but is correctly running on local port.)
   #+begin_src clojure
     (require '[oz.core :as oz])
     (oz/start-server!)
     ;; http://localhost:10666/
   #+end_src
** Visualizing Mavs
   #+begin_src clojure
     (filter #(= (:TEAM_NAME %) "Mavericks") nba_team_stats_2011)

     (defn play-data [& names]
       (for [n names
	     i (range 20)]
	     {:time i :item n :quantity (+ (Math/pow (* i (count n)) 0.8) (rand-int (count n)))}))

     (def line-plot
       {:data {:values (play-data "monkey" "slipper" "broom")}
	:encoding {:x {:field "time" :type "quantitative"}
		   :y {:field "quantity" :type "quantitative"}
		   :color {:field "item" :type "nominal"}}
	:mark "line"})

     ;; Render the plot
     (oz/view! line-plot)
   #+end_src
